# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QPF52ORnDJoX92ASdyKwvpkR5dYe901j
"""

from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import io
import base64
import re
from datetime import datetime
from sklearn.linear_model import LinearRegression
import numpy as np

app = Flask(__name__)
CORS(app)  # Enable CORS for frontend-backend communication
data_store = {}  # Stores DataFrames and session data
chat_history = {}  # Stores chat history per session
undo_stack = {}  # Stores DataFrame states for undo
upload_log = {}  # Stores upload history per session

class ChatProcessor:
    def __init__(self, df):
        self.df = df
        self.history = []
        self.undo_states = []

    def save_state(self):
        """Save DataFrame state for undo."""
        self.undo_states.append(self.df.copy())

    def generate_plot(self, plot_type, params):
        """Generate and return a plot as a base64-encoded image."""
        plt.figure(figsize=(10, 6))
        if plot_type == "bar":
            x, y = params
            sns.barplot(x=x, y=y, data=self.df)
            plt.xlabel(x)
            plt.ylabel(y)
        elif plot_type == "line":
            x, y = params
            sns.lineplot(x=x, y=y, data=self.df)
            plt.xlabel(x)
            plt.ylabel(y)
        elif plot_type == "scatter":
            x, y = params
            sns.scatterplot(x=x, y=y, data=self.df)
            plt.xlabel(x)
            plt.ylabel(y)
        elif plot_type == "pie":
            col = params
            self.df[col].value_counts().plot.pie(autopct='%1.1f%%')
            plt.title(f"Pie Chart of {col}")
        elif plot_type == "histogram":
            col = params
            sns.histplot(self.df[col], bins=20)
            plt.title(f"Histogram of {col}")
        elif plot_type == "box":
            col = params
            sns.boxplot(y=self.df[col])
            plt.title(f"Box Plot of {col}")
        elif plot_type == "heatmap":
            corr = self.df.select_dtypes(include=[np.number]).corr()
            sns.heatmap(corr, annot=True, cmap='coolwarm')
            plt.title("Correlation Heatmap")
        elif plot_type == "pairplot":
            sns.pairplot(self.df.select_dtypes(include=[np.number]))

        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        img_str = base64.b64encode(buf.getvalue()).decode()
        plt.close()
        return img_str

    def process_command(self, message):
        """Process user commands and return response."""
        self.history.append({"timestamp": datetime.now().strftime("%H:%M:%S"), "message": message})
        message = message.lower().strip()

        # File & Session Features
        if message == "preview data":
            return {"response": f"First 5 rows:\n{self.df.head().to_string()}"}
        elif message == "show column names":
            return {"response": f"Columns: {', '.join(self.df.columns)}"}
        elif message == "reset session":
            self.df = self.df.iloc[0:0]
            self.undo_states = []
            self.history = []
            return {"response": "Session reset. Please upload a new file."}
        elif message == "show shape":
            return {"response": f"Rows: {self.df.shape[0]}, Columns: {self.df.shape[1]}"}

        # Basic Analysis
        elif message == "show summary":
            summary = self.df.describe().to_dict()
            info = f"Rows: {self.df.shape[0]}, Columns: {self.df.shape[1]}"
            return {"response": info, "table": summary}
        elif message.startswith("value counts of "):
            col = re.search(r"of\s+(\w+)", message)
            if col and col.group(1) in self.df.columns:
                counts = self.df[col.group(1)].value_counts().to_dict()
                return {"response": f"Value counts for {col.group(1)}:", "table": {col.group(1): counts}}
            return {"error": "Invalid column name."}
        elif message == "show nulls":
            nulls = self.df.isnull().sum().to_dict()
            return {"response": "Null values per column:", "table": nulls}
        elif message == "column data types":
            dtypes = self.df.dtypes.astype(str).to_dict()
            return {"response": "Column data types:", "table": dtypes}
        elif message == "show head":
            return {"response": f"First 5 rows:\n{self.df.head().to_string()}"}
        elif message == "show tail":
            return {"response": f"Last 5 rows:\n{self.df.tail().to_string()}"}

        # Data Cleaning
        elif message == "drop missing":
            self.save_state()
            self.df.dropna(inplace=True)
            return {"response": "Missing values dropped."}
        elif message == "fill missing with 0":
            self.save_state()
            self.df.fillna(0, inplace=True)
            return {"response": "Missing values filled with 0."}
        elif message.startswith("fill missing in "):
            match = re.search(r"in\s+(\w+)\s+with\s+(mean|median|mode)", message)
            if match and match.group(1) in self.df.columns:
                col, method = match.groups()
                self.save_state()
                if method == "mean":
                    self.df[col].fillna(self.df[col].mean(), inplace=True)
                elif method == "median":
                    self.df[col].fillna(self.df[col].median(), inplace=True)
                elif method == "mode":
                    self.df[col].fillna(self.df[col].mode()[0], inplace=True)
                return {"response": f"Missing values in {col} filled with {method}."}
            return {"error": "Invalid column or method (use mean, median, or mode)."}
        elif message.startswith("drop column "):
            col = re.search(r"drop column\s+(\w+)", message)
            if col and col.group(1) in self.df.columns:
                self.save_state()
                self.df.drop(columns=col.group(1), inplace=True)
                return {"response": f"Column {col.group(1)} dropped."}
            return {"error": "Invalid column name."}
        elif message == "drop duplicates":
            self.save_state()
            self.df.drop_duplicates(inplace=True)
            return {"response": "Duplicates dropped."}
        elif message.startswith("rename column "):
            match = re.search(r"rename column\s+(\w+)\s+to\s+(\w+)", message)
            if match and match.group(1) in self.df.columns:
                self.save_state()
                self.df.rename(columns={match.group(1): match.group(2)}, inplace=True)
                return {"response": f"Column {match.group(1)} renamed to {match.group(2)}."}
            return {"error": "Invalid column name or new name."}
        elif message.startswith("change column "):
            match = re.search(r"change column\s+(\w+)\s+to\s+(int|float|str)", message)
            if match and match.group(1) in self.df.columns:
                col, dtype = match.groups()
                self.save_state()
                try:
                    if dtype == "int":
                        self.df[col] = self.df[col].astype(int)
                    elif dtype == "float":
                        self.df[col] = self.df[col].astype(float)
                    elif dtype == "str":
                        self.df[col] = self.df[col].astype(str)
                    return {"response": f"Column {col} changed to {dtype}."}
                except Exception as e:
                    return {"error": f"Failed to change column type: {str(e)}"}
            return {"error": "Invalid column or data type (use int, float, or str)."}

        # Visualizations
        elif message.startswith("bar chart of "):
            match = re.search(r"of\s+(\w+)\s+vs\s+(\w+)", message)
            if match and match.group(1) in self.df.columns and match.group(2) in self.df.columns:
                img_str = self.generate_plot("bar", (match.group(1), match.group(2)))
                return {"response": "Bar chart generated.", "image": f"data:image/png;base64,{img_str}"}
            return {"error": "Invalid columns for bar chart."}
        elif message.startswith("line chart of "):
            match = re.search(r"of\s+(\w+)\s+vs\s+(\w+)", message)
            if match and match.group(1) in self.df.columns and match.group(2) in self.df.columns:
                img_str = self.generate_plot("line", (match.group(1), match.group(2)))
                return {"response": "Line chart generated.", "image": f"data:image/png;base64,{img_str}"}
            return {"error": "Invalid columns for line chart."}
        elif message.startswith("scatter plot of "):
            match = re.search(r"of\s+(\w+)\s+vs\s+(\w+)", message)
            if match and match.group(1) in self.df.columns and match.group(2) in self.df.columns:
                img_str = self.generate_plot("scatter", (match.group(1), match.group(2)))
                return {"response": "Scatter plot generated.", "image": f"data:image/png;base64,{img_str}"}
            return {"error": "Invalid columns for scatter plot."}
        elif message.startswith("pie chart of "):
            col = re.search(r"of\s+(\w+)", message)
            if col and col.group(1) in self.df.columns:
                img_str = self.generate_plot("pie", col.group(1))
                return {"response": f"Pie chart for {col.group(1)} generated.", "image": f"data:image/png;base64,{img_str}"}
            return {"error": "Invalid column for pie chart."}
        elif message.startswith("histogram of "):
            col = re.search(r"of\s+(\w+)", message)
            if col and col.group(1) in self.df.columns:
                img_str = self.generate_plot("histogram", col.group(1))
                return {"response": f"Histogram for {col.group(1)} generated.", "image": f"data:image/png;base64,{img_str}"}
            return {"error": "Invalid column for histogram."}
        elif message.startswith("box plot of "):
            col = re.search(r"of\s+(\w+)", message)
            if col and col.group(1) in self.df.columns:
                img_str = self.generate_plot("box", col.group(1))
                return {"response": f"Box plot for {col.group(1)} generated.", "image": f"data:image/png;base64,{img_str}"}
            return {"error": "Invalid column for box plot."}
        elif message == "heatmap of correlations":
            if self.df.select_dtypes(include=[np.number]).shape[1] > 1:
                img_str = self.generate_plot("heatmap", None)
                return {"response": "Correlation heatmap generated.", "image": f"data:image/png;base64,{img_str}"}
            return {"error": "Need at least two numeric columns for heatmap."}
        elif message == "pairplot":
            if self.df.select_dtypes(include=[np.number]).shape[1] > 1:
                img_str = self.generate_plot("pairplot", None)
                return {"response": "Pairplot generated.", "image": f"data:image/png;base64,{img_str}"}
            return {"error": "Need at least two numeric columns for pairplot."}

        # Smart Commands
        elif message == "suggest insights":
            insights = []
            for col in self.df.columns:
                if self.df[col].dtype in ['int64', 'float64']:
                    insights.append(f"{col}: Mean={self.df[col].mean():.2f}, Std={self.df[col].std():.2f}")
                else:
                    top_val = self.df[col].mode()[0]
                    insights.append(f"{col}: Most frequent value is '{top_val}'")
            return {"response": "Insights:\n" + "\n".join(insights)}
        elif message == "generate report":
            try:
                from ydata_profiling import ProfileReport
                profile = ProfileReport(self.df, title="Data Report", minimal=True)
                report_path = f"report_{id(self)}.html"
                profile.to_file(report_path)
                return {"response": "Report generated.", "file": report_path}
            except ImportError:
                return {"error": "ydata-profiling not installed. Run 'pip install ydata-profiling'."}
        elif message == "auto summarize dataset":
            summary = self.df.describe(include='all').to_dict()
            return {"response": "Dataset summary:", "table": summary}
        elif message.startswith("predict column "):
            col = re.search(r"predict column\s+(\w+)", message)
            if col and col.group(1) in self.df.columns:
                target = col.group(1)
                numeric_cols = self.df.select_dtypes(include=[np.number]).columns
                if target in numeric_cols and len(numeric_cols) > 1:
                    X = self.df[numeric_cols].drop(columns=[target]).fillna(0)
                    y = self.df[target].fillna(0)
                    model = LinearRegression()
                    model.fit(X, y)
                    preds = model.predict(X)
                    return {"response": f"Predictions for {target}:\n{pd.Series(preds[:5]).to_string()}"}
                return {"error": "Target must be numeric with at least one other numeric column."}
            return {"error": "Invalid column for prediction."}

        # Downloads
        elif message == "download cleaned data":
            output = io.StringIO()
            self.df.to_csv(output, index=False)
            output.seek(0)
            return send_file(
                io.BytesIO(output.getvalue().encode()),
                mimetype='text/csv',
                as_attachment=True,
                download_name='cleaned_data.csv'
            )
        elif message == "download summary as text":
            summary = self.df.describe().to_string()
            return send_file(
                io.BytesIO(summary.encode()),
                mimetype='text/plain',
                as_attachment=True,
                download_name='summary.txt'
            )
        elif message == "download report":
            try:
                from ydata_profiling import ProfileReport
                profile = ProfileReport(self.df, title="Data Report", minimal=True)
                report_path = f"report_{id(self)}.html"
                profile.to_file(report_path)
                return send_file(report_path, as_attachment=True, download_name='report.html')
            except ImportError:
                return {"error": "ydata-profiling not installed."}
        elif message.startswith("download chart "):
            plot_type = re.search(r"download chart\s+(bar|line|scatter|pie|histogram|box)\s+of\s+(\w+)(?:\s+vs\s+(\w+))?", message)
            if plot_type:
                ptype, param1, param2 = plot_type.groups()
                params = (param1, param2) if param2 else param1
                if (ptype in ["bar", "line", "scatter"] and param2 and param1 in self.df.columns and param2 in self.df.columns) or \
                   (ptype in ["pie", "histogram", "box"] and param1 in self.df.columns):
                    img_str = self.generate_plot(ptype, params)
                    return send_file(
                        io.BytesIO(base64.b64decode(img_str)),
                        mimetype='image/png',
                        as_attachment=True,
                        download_name=f"{ptype}_chart.png"
                    )
                return {"error": "Invalid columns for chart."}
            return {"error": "Invalid chart type or parameters."}

        # Chat History & Logging
        elif message == "show chat history":
            return {"response": "Chat history:\n" + "\n".join([f"[{h['timestamp']}] {h['message']}" for h in self.history])}
        elif message == "undo last action":
            if self.undo_states:
                self.df = self.undo_states.pop()
                return {"response": "Last action undone."}
            return {"error": "No actions to undo."}
        elif message == "show upload log":
            if session_id in upload_log:
                return {"response": "Upload log:\n" + "\n".join([f"[{log['timestamp']}] {log['filename']}" for log in upload_log[session_id]])}
            return {"response": "No uploads in this session."}

        # Optional Advanced Features
        elif message.startswith("ask "):
            question = re.search(r"ask\s+(.+)", message)
            if question:
                return {"response": f"Question received: {question.group(1)}. Natural language querying not fully implemented. Try specific commands."}
        elif message.startswith("search rows where "):
            condition = re.search(r"where\s+(.+)", message)
            if condition:
                try:
                    result = self.df.query(condition.group(1)).to_string()
                    return {"response": f"Rows matching '{condition.group(1)}':\n{result}"}
                except Exception as e:
                    return {"error": f"Invalid query: {str(e)}"}
            return {"error": "Invalid search condition."}
        elif message.startswith("run formula "):
            formula = re.search(r"run formula\s+(.+)", message)
            if formula:
                try:
                    new_col = self.df.eval(formula.group(1))
                    self.save_state()
                    self.df['formula_result'] = new_col
                    return {"response": f"Formula applied, result in 'formula_result' column:\n{self.df['formula_result'].head().to_string()}"}
                except Exception as e:
                    return {"error": f"Invalid formula: {str(e)}"}
            return {"error": "Invalid formula."}

        return {"response": "Command not recognized. Try 'show summary', 'drop missing', 'bar chart of X vs Y', etc."}

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "No file uploaded"}), 400
    file = request.files['file']
    if not file.filename:
        return jsonify({"error": "No file selected"}), 400
    if file.filename.endswith(('.csv', '.xlsx', '.xls')):
        session_id = str(len(data_store))
        try:
            if file.filename.endswith('.csv'):
                df = pd.read_csv(file)
            else:
                df = pd.read_excel(file)
            data_store[session_id] = ChatProcessor(df)
            chat_history[session_id] = []
            undo_stack[session_id] = []
            upload_log.setdefault(session_id, []).append({
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "filename": file.filename
            })
            return jsonify({
                "session_id": session_id,
                "response": f"File '{file.filename}' uploaded successfully. First 5 rows:\n{df.head().to_string()}"
            })
        except Exception as e:
            return jsonify({"error": f"Failed to read file: {str(e)}"}), 400
    return jsonify({"error": "Unsupported file format. Use CSV or Excel."}), 400

@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    session_id = data.get('session_id')
    message = data.get('message')
    if session_id not in data_store:
        return jsonify({"error": "Invalid session ID"}), 400
    if not message:
        return jsonify({"error": "No message provided"}), 400
    processor = data_store[session_id]
    chat_history[session_id].append({"timestamp": datetime.now().strftime("%H:%M:%S"), "message": message})
    return processor.process_command(message)

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000)